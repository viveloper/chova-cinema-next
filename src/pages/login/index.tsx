import { FormEvent, useEffect, useState } from 'react';
import Head from 'next/head';
import styled from '@emotion/styled';
import Layout from '@/components/Layout';
import { RotatingLines } from 'react-loader-spinner';
import useAuth from '@/hooks/useAuth';

interface LoginProps {}

const TEST_USER_EMAIL = process.env.NEXT_PUBLIC_TEST_USER_EMAIL;
const TEST_USER_PASSWORD = process.env.NEXT_PUBLIC_TEST_USER_PASSWORD;

function Login({}: LoginProps) {
  const { isLoading, errorMessage, login } = useAuth();

  // TODO: input validation 고도화
  const [email, setEmail] = useState(TEST_USER_EMAIL ?? '');
  const [password, setPassword] = useState(TEST_USER_PASSWORD ?? '');

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    login({ email, password });
  };

  return (
    <>
      <Head>
        <title>Movies - Chova Cinema</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <LoginBlock>
          {isLoading && (
            <LoadingWrapper>
              <RotatingLines
                strokeColor="#f45866"
                strokeWidth="5"
                animationDuration="0.75"
                width="72"
                visible={true}
              />
            </LoadingWrapper>
          )}
          <div className="tabs"></div>
          <LoginFormBlock>
            <div className="center">
              <form onSubmit={handleSubmit}>
                <div className="input-group">
                  <input
                    type="text"
                    name="email"
                    placeholder="이메일을 입력해주세요"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                  <input
                    type="password"
                    name="password"
                    placeholder="비밀번호를 입력해주세요"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </div>
                <button type="submit">로그인</button>
              </form>
              {errorMessage && <p className="error-message">{errorMessage}</p>}
            </div>
          </LoginFormBlock>
        </LoginBlock>
      </Layout>
    </>
  );
}

export default Login;

const LoadingWrapper = styled.div`
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  display: flex;
  justify-content: center;
  align-items: center;
`;

const LoginBlock = styled.div`
  position: relative;
  padding: 60px 0;
  margin: 80px 0;
`;

const LoginFormBlock = styled.div`
  background: #f5f5f5;
  width: 100%;
  height: 360px;
  .center {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  form {
    display: flex;
    justify-content: space-between;
    width: 100%;
    .input-group {
      flex: 1;
      input {
        display: block;
        width: 100%;
        height: 45px;
        padding: 0 18px;
        font-size: 14px;
        font-family: 'Noto Sans KR', 'Roboto', 'dotum', 'sans-serif';
        border: 1px solid #ddd;
        border-radius: 4px;
        outline: none;
      }
      input + input {
        margin-top: 10px;
      }
    }
    button {
      background: #ff243e;
      width: 110px;
      border: none;
      border-radius: 4px;
      outline: none;
      color: #fff;
      font-size: 16px;
      margin-left: 10px;
      cursor: pointer;
      transition: background 0.3s ease;
      &:hover {
        background: #ff7384;
      }
    }
  }
  .error-message {
    font-family: 'Noto Sans KR', 'Roboto', 'dotum', 'sans-serif';
    color: red;
    margin-top: 20px;
  }
`;
